
modbus_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000327c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003440  08003440  00004440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003458  08003458  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003458  08003458  00004458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003460  08003460  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003460  08003460  00004460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003468  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000000c  08003474  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08003474  000055a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb7e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f48  00000000  00000000  00011bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00013b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ff  00000000  00000000  00014580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020960  00000000  00000000  00014d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d49d  00000000  00000000  000356df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9f6c  00000000  00000000  00042b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b20  00000000  00000000  000fcb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000ff64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003428 	.word	0x08003428

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003428 	.word	0x08003428

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */
    
    /* MCU Configuration--------------------------------------------------------*/
    
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80004f8:	f000 fd8e 	bl	8001018 <HAL_Init>
    /* USER CODE BEGIN Init */
    
    /* USER CODE END Init */
    
    /* Configure the system clock */
    SystemClock_Config();
 80004fc:	f000 f86e 	bl	80005dc <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */
    
    /* USER CODE END SysInit */
    
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000500:	f000 f974 	bl	80007ec <_ZL12MX_GPIO_Initv>
    MX_USART3_UART_Init();
 8000504:	f000 f8e0 	bl	80006c8 <_ZL19MX_USART3_UART_Initv>
    MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f93a 	bl	8000780 <_ZL22MX_USB_OTG_FS_PCD_Initv>
    MX_USART6_UART_Init();
 800050c:	f000 f90a 	bl	8000724 <_ZL19MX_USART6_UART_Initv>
    /* USER CODE BEGIN 2 */
    
    /* USER CODE END 2 */
    
    
    Motor_Excitation_ON(DRUM_MOTOR_ID);
 8000510:	2001      	movs	r0, #1
 8000512:	f000 fa77 	bl	8000a04 <_Z19Motor_Excitation_ONh>
    HAL_Delay(30);
 8000516:	201e      	movs	r0, #30
 8000518:	f000 fdf0 	bl	80010fc <HAL_Delay>
    Motor_Excitation_ON(SPOOLER_MOTOR_ID);
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fa71 	bl	8000a04 <_Z19Motor_Excitation_ONh>
    HAL_Delay(30);
 8000522:	201e      	movs	r0, #30
 8000524:	f000 fdea 	bl	80010fc <HAL_Delay>
    
    
    Motor_CW_Low_Speed(DRUM_MOTOR_ID);
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fb43 	bl	8000bb4 <_Z18Motor_CW_Low_Speedh>
    HAL_Delay(30);
 800052e:	201e      	movs	r0, #30
 8000530:	f000 fde4 	bl	80010fc <HAL_Delay>
    Motor_CW_Low_Speed(SPOOLER_MOTOR_ID);
 8000534:	2002      	movs	r0, #2
 8000536:	f000 fb3d 	bl	8000bb4 <_Z18Motor_CW_Low_Speedh>
    HAL_Delay(10000);
 800053a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800053e:	f000 fddd 	bl	80010fc <HAL_Delay>
    Motor_CCW_Low_Speed(DRUM_MOTOR_ID);
 8000542:	2001      	movs	r0, #1
 8000544:	f000 fb84 	bl	8000c50 <_Z19Motor_CCW_Low_Speedh>
    HAL_Delay(30);
 8000548:	201e      	movs	r0, #30
 800054a:	f000 fdd7 	bl	80010fc <HAL_Delay>
    Motor_CCW_Low_Speed(SPOOLER_MOTOR_ID);
 800054e:	2002      	movs	r0, #2
 8000550:	f000 fb7e 	bl	8000c50 <_Z19Motor_CCW_Low_Speedh>
    HAL_Delay(9000);
 8000554:	f242 3028 	movw	r0, #9000	@ 0x2328
 8000558:	f000 fdd0 	bl	80010fc <HAL_Delay>
    
    
    Motor_CW_Mid_Speed(DRUM_MOTOR_ID);
 800055c:	2001      	movs	r0, #1
 800055e:	f000 fb43 	bl	8000be8 <_Z18Motor_CW_Mid_Speedh>
    HAL_Delay(30);
 8000562:	201e      	movs	r0, #30
 8000564:	f000 fdca 	bl	80010fc <HAL_Delay>
    Motor_CW_Mid_Speed(SPOOLER_MOTOR_ID);
 8000568:	2002      	movs	r0, #2
 800056a:	f000 fb3d 	bl	8000be8 <_Z18Motor_CW_Mid_Speedh>
    HAL_Delay(10000);
 800056e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000572:	f000 fdc3 	bl	80010fc <HAL_Delay>
    Motor_CCW_Mid_Speed(DRUM_MOTOR_ID);
 8000576:	2001      	movs	r0, #1
 8000578:	f000 fb86 	bl	8000c88 <_Z19Motor_CCW_Mid_Speedh>
    HAL_Delay(30);
 800057c:	201e      	movs	r0, #30
 800057e:	f000 fdbd 	bl	80010fc <HAL_Delay>
    Motor_CCW_Mid_Speed(SPOOLER_MOTOR_ID);
 8000582:	2002      	movs	r0, #2
 8000584:	f000 fb80 	bl	8000c88 <_Z19Motor_CCW_Mid_Speedh>
    HAL_Delay(10000);
 8000588:	f242 7010 	movw	r0, #10000	@ 0x2710
 800058c:	f000 fdb6 	bl	80010fc <HAL_Delay>
    
    Motor_CW_High_Speed(DRUM_MOTOR_ID);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fb43 	bl	8000c1c <_Z19Motor_CW_High_Speedh>
    HAL_Delay(30);
 8000596:	201e      	movs	r0, #30
 8000598:	f000 fdb0 	bl	80010fc <HAL_Delay>
    Motor_CW_High_Speed(SPOOLER_MOTOR_ID);
 800059c:	2002      	movs	r0, #2
 800059e:	f000 fb3d 	bl	8000c1c <_Z19Motor_CW_High_Speedh>
    HAL_Delay(10000);
 80005a2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80005a6:	f000 fda9 	bl	80010fc <HAL_Delay>
    Motor_CCW_High_Speed(DRUM_MOTOR_ID);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f000 fb88 	bl	8000cc0 <_Z20Motor_CCW_High_Speedh>
    HAL_Delay(30);
 80005b0:	201e      	movs	r0, #30
 80005b2:	f000 fda3 	bl	80010fc <HAL_Delay>
    Motor_CCW_High_Speed(SPOOLER_MOTOR_ID);
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 fb82 	bl	8000cc0 <_Z20Motor_CCW_High_Speedh>
    HAL_Delay(10000);
 80005bc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80005c0:	f000 fd9c 	bl	80010fc <HAL_Delay>
    
    Motor_Stop(DRUM_MOTOR_ID);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fb97 	bl	8000cf8 <_Z10Motor_Stoph>
    HAL_Delay(30);
 80005ca:	201e      	movs	r0, #30
 80005cc:	f000 fd96 	bl	80010fc <HAL_Delay>
    Motor_Stop(SPOOLER_MOTOR_ID);
 80005d0:	2002      	movs	r0, #2
 80005d2:	f000 fb91 	bl	8000cf8 <_Z10Motor_Stoph>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0xe2>
	...

080005dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2234      	movs	r2, #52	@ 0x34
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 feef 	bl	80033ce <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
    
    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <_Z18SystemClock_Configv+0xe4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a2d      	ldr	r2, [pc, #180]	@ (80006c0 <_Z18SystemClock_Configv+0xe4>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <_Z18SystemClock_Configv+0xe4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <_Z18SystemClock_Configv+0xe8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a27      	ldr	r2, [pc, #156]	@ (80006c4 <_Z18SystemClock_Configv+0xe8>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <_Z18SystemClock_Configv+0xe8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]
    
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800063c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000640:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 384;
 8000650:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 8;
 800065a:	2308      	movs	r3, #8
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fd28 	bl	80020bc <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf14      	ite	ne
 8000672:	2301      	movne	r3, #1
 8000674:	2300      	moveq	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <_Z18SystemClock_Configv+0xa4>
    {
        Error_Handler();
 800067c:	f000 f964 	bl	8000948 <Error_Handler>
    }
    
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60bb      	str	r3, [r7, #8]
        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
    
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2103      	movs	r1, #3
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f91f 	bl	80018e0 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_Z18SystemClock_Configv+0xda>
    {
        Error_Handler();
 80006b2:	f000 f949 	bl	8000948 <Error_Handler>
    }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */
    
    /* USER CODE BEGIN USART3_Init 1 */
    
    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <_ZL19MX_USART3_UART_Initv+0x58>)
 80006d0:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fe:	4807      	ldr	r0, [pc, #28]	@ (800071c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000700:	f001 ff60 	bl	80025c4 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <_ZL19MX_USART3_UART_Initv+0x50>
    {
        Error_Handler();
 8000714:	f000 f918 	bl	8000948 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */
    
    /* USER CODE END USART3_Init 2 */
    
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000028 	.word	0x20000028
 8000720:	40004800 	.word	0x40004800

08000724 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    /* USER CODE END USART6_Init 0 */
    
    /* USER CODE BEGIN USART6_Init 1 */
    
    /* USER CODE END USART6_Init 1 */
    huart6.Instance = USART6;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 800072a:	4a14      	ldr	r2, [pc, #80]	@ (800077c <_ZL19MX_USART6_UART_Initv+0x58>)
 800072c:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart6) != HAL_OK)
 800075a:	4807      	ldr	r0, [pc, #28]	@ (8000778 <_ZL19MX_USART6_UART_Initv+0x54>)
 800075c:	f001 ff32 	bl	80025c4 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2301      	movne	r3, #1
 8000768:	2300      	moveq	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <_ZL19MX_USART6_UART_Initv+0x50>
    {
        Error_Handler();
 8000770:	f000 f8ea 	bl	8000948 <Error_Handler>
    }
    /* USER CODE BEGIN USART6_Init 2 */
    
    /* USER CODE END USART6_Init 2 */
    
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000070 	.word	0x20000070
 800077c:	40011400 	.word	0x40011400

08000780 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    /* USER CODE END USB_OTG_FS_Init 0 */
    
    /* USER CODE BEGIN USB_OTG_FS_Init 1 */
    
    /* USER CODE END USB_OTG_FS_Init 1 */
    hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000786:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800078a:	601a      	str	r2, [r3, #0]
    hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 800078e:	2206      	movs	r2, #6
 8000790:	711a      	strb	r2, [r3, #4]
    hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000794:	2202      	movs	r2, #2
 8000796:	71da      	strb	r2, [r3, #7]
    hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	719a      	strb	r2, [r3, #6]
    hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	725a      	strb	r2, [r3, #9]
    hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	729a      	strb	r2, [r3, #10]
    hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	72da      	strb	r2, [r3, #11]
    hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	731a      	strb	r2, [r3, #12]
    hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	735a      	strb	r2, [r3, #13]
    hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007be:	2201      	movs	r2, #1
 80007c0:	739a      	strb	r2, [r3, #14]
    hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	73da      	strb	r2, [r3, #15]
    if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c8:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80007ca:	f000 ff4e 	bl	800166a <HAL_PCD_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x62>
    {
        Error_Handler();
 80007de:	f000 f8b3 	bl	8000948 <Error_Handler>
    }
    /* USER CODE BEGIN USB_OTG_FS_Init 2 */
    
    /* USER CODE END USB_OTG_FS_Init 2 */
    
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000b8 	.word	0x200000b8

080007ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	@ 0x30
 80007f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */
    
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a4b      	ldr	r2, [pc, #300]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b45      	ldr	r3, [pc, #276]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a44      	ldr	r2, [pc, #272]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b42      	ldr	r3, [pc, #264]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b3e      	ldr	r3, [pc, #248]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a3d      	ldr	r2, [pc, #244]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a36      	ldr	r2, [pc, #216]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b30      	ldr	r3, [pc, #192]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a2f      	ldr	r2, [pc, #188]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <_ZL12MX_GPIO_Initv+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
    
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008b0:	4822      	ldr	r0, [pc, #136]	@ (800093c <_ZL12MX_GPIO_Initv+0x150>)
 80008b2:	f000 fec1 	bl	8001638 <HAL_GPIO_WritePin>
    
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2140      	movs	r1, #64	@ 0x40
 80008ba:	4821      	ldr	r0, [pc, #132]	@ (8000940 <_ZL12MX_GPIO_Initv+0x154>)
 80008bc:	f000 febc 	bl	8001638 <HAL_GPIO_WritePin>
    
    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	481b      	ldr	r0, [pc, #108]	@ (8000944 <_ZL12MX_GPIO_Initv+0x158>)
 80008d8:	f000 fd1a 	bl	8001310 <HAL_GPIO_Init>
    
    /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008dc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <_ZL12MX_GPIO_Initv+0x150>)
 80008f6:	f000 fd0b 	bl	8001310 <HAL_GPIO_Init>
    
    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	@ (8000940 <_ZL12MX_GPIO_Initv+0x154>)
 8000912:	f000 fcfd 	bl	8001310 <HAL_GPIO_Init>
    
    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <_ZL12MX_GPIO_Initv+0x154>)
 800092a:	f000 fcf1 	bl	8001310 <HAL_GPIO_Init>
    
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	@ 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40021800 	.word	0x40021800
 8000944:	40020800 	.word	0x40020800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <_Z19Modbus_CalculateCRCPht>:
    modbusState.lastRegister = 0;
    modbusState.lastValue = 0;
    return MODBUS_OK;
}

uint16_t Modbus_CalculateCRC(uint8_t *buffer, uint16_t length) {
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000960:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000964:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	81bb      	strh	r3, [r7, #12]
 800096a:	e022      	b.n	80009b2 <_Z19Modbus_CalculateCRCPht+0x5e>
        crc ^= buffer[i];
 800096c:	89bb      	ldrh	r3, [r7, #12]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	4053      	eors	r3, r2
 800097a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800097c:	2300      	movs	r3, #0
 800097e:	72fb      	strb	r3, [r7, #11]
 8000980:	e011      	b.n	80009a6 <_Z19Modbus_CalculateCRCPht+0x52>
            if (crc & 0x0001) {
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <_Z19Modbus_CalculateCRCPht+0x46>
                crc = (crc >> 1) ^ 0xA001;
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	085b      	lsrs	r3, r3, #1
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <_Z19Modbus_CalculateCRCPht+0x74>)
 8000994:	4053      	eors	r3, r2
 8000996:	81fb      	strh	r3, [r7, #14]
 8000998:	e002      	b.n	80009a0 <_Z19Modbus_CalculateCRCPht+0x4c>
            } else {
                crc >>= 1;
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	085b      	lsrs	r3, r3, #1
 800099e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80009a0:	7afb      	ldrb	r3, [r7, #11]
 80009a2:	3301      	adds	r3, #1
 80009a4:	72fb      	strb	r3, [r7, #11]
 80009a6:	7afb      	ldrb	r3, [r7, #11]
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	d9ea      	bls.n	8000982 <_Z19Modbus_CalculateCRCPht+0x2e>
    for (uint16_t i = 0; i < length; i++) {
 80009ac:	89bb      	ldrh	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	81bb      	strh	r3, [r7, #12]
 80009b2:	89ba      	ldrh	r2, [r7, #12]
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d8      	bcc.n	800096c <_Z19Modbus_CalculateCRCPht+0x18>
            }
        }
    }
    return crc;
 80009ba:	89fb      	ldrh	r3, [r7, #14]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	ffffa001 	.word	0xffffa001

080009cc <_Z18Modbus_SendCommandPht>:

uint8_t Modbus_SendCommand(uint8_t *request, uint16_t length) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart6, request, length, MODBUS_RESPONSE_TIMEOUT);
 80009d8:	887a      	ldrh	r2, [r7, #2]
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <_Z18Modbus_SendCommandPht+0x34>)
 80009e2:	f001 fe3f 	bl	8002664 <HAL_UART_Transmit>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]
    return (status == HAL_OK) ? MODBUS_OK : MODBUS_ERROR_TIMEOUT;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <_Z18Modbus_SendCommandPht+0x28>
 80009f0:	2300      	movs	r3, #0
 80009f2:	e000      	b.n	80009f6 <_Z18Modbus_SendCommandPht+0x2a>
 80009f4:	2302      	movs	r3, #2
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000070 	.word	0x20000070

08000a04 <_Z19Motor_Excitation_ONh>:
    }
    return MODBUS_ERROR_TIMEOUT;
}

// NOTE(rsb): Motor Control Functions Implementation
uint8_t Motor_Excitation_ON(uint8_t motorID) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    uint8_t request[16] = {0};
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
    
    request[0] = motorID;           // Address
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	733b      	strb	r3, [r7, #12]
    request[1] = 0x10;             // Function code
 8000a22:	2310      	movs	r3, #16
 8000a24:	737b      	strb	r3, [r7, #13]
    request[2] = 0x00;             // Register address high
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
    request[3] = 0x7C;             // Register address low
 8000a2a:	237c      	movs	r3, #124	@ 0x7c
 8000a2c:	73fb      	strb	r3, [r7, #15]
    request[4] = 0x00;             // Number of registers high
 8000a2e:	2300      	movs	r3, #0
 8000a30:	743b      	strb	r3, [r7, #16]
    request[5] = 0x02;             // Number of registers low
 8000a32:	2302      	movs	r3, #2
 8000a34:	747b      	strb	r3, [r7, #17]
    request[6] = 0x04;             // Byte count
 8000a36:	2304      	movs	r3, #4
 8000a38:	74bb      	strb	r3, [r7, #18]
    request[7] = 0x00;             // Data high
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	74fb      	strb	r3, [r7, #19]
    request[8] = 0x00;             // Data
 8000a3e:	2300      	movs	r3, #0
 8000a40:	753b      	strb	r3, [r7, #20]
    request[9] = 0x00;             // Data
 8000a42:	2300      	movs	r3, #0
 8000a44:	757b      	strb	r3, [r7, #21]
    request[10] = 0x01;            // Data low (ON)
 8000a46:	2301      	movs	r3, #1
 8000a48:	75bb      	strb	r3, [r7, #22]
    
    uint16_t crc = Modbus_CalculateCRC(request, 11);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	210b      	movs	r1, #11
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff7f 	bl	8000954 <_Z19Modbus_CalculateCRCPht>
 8000a56:	4603      	mov	r3, r0
 8000a58:	83fb      	strh	r3, [r7, #30]
    request[11] = crc & 0xFF;
 8000a5a:	8bfb      	ldrh	r3, [r7, #30]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	75fb      	strb	r3, [r7, #23]
    request[12] = (crc >> 8) & 0xFF;
 8000a60:	8bfb      	ldrh	r3, [r7, #30]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	763b      	strb	r3, [r7, #24]
    
    return Modbus_SendCommand(request, 13);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	210d      	movs	r1, #13
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffab 	bl	80009cc <_Z18Modbus_SendCommandPht>
 8000a76:	4603      	mov	r3, r0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_Z19Motor_Speed_Controlhs>:
    request[12] = (crc >> 8) & 0xFF;
    
    return Modbus_SendCommand(request, 13);
}

uint8_t Motor_Speed_Control(uint8_t motorID, int16_t speed) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	@ 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	80bb      	strh	r3, [r7, #4]
    uint8_t request[40] = {0};
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2224      	movs	r2, #36	@ 0x24
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fc96 	bl	80033ce <memset>
    
    request[0] = motorID;                // Address
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	723b      	strb	r3, [r7, #8]
    request[1] = 0x10;                   // Function code
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	727b      	strb	r3, [r7, #9]
    request[2] = 0x00;                   // Register address high
 8000aaa:	2300      	movs	r3, #0
 8000aac:	72bb      	strb	r3, [r7, #10]
    request[3] = 0x5A;                   // Register address low
 8000aae:	235a      	movs	r3, #90	@ 0x5a
 8000ab0:	72fb      	strb	r3, [r7, #11]
    request[4] = 0x00;                   // Number of registers high
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	733b      	strb	r3, [r7, #12]
    request[5] = 0x0E;                   // Number of registers low
 8000ab6:	230e      	movs	r3, #14
 8000ab8:	737b      	strb	r3, [r7, #13]
    request[6] = 0x1C;                   // Byte count
 8000aba:	231c      	movs	r3, #28
 8000abc:	73bb      	strb	r3, [r7, #14]
    
    // Operation type (Continuous operation speed control)
    request[7] = 0x00;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
    request[8] = 0x00;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	743b      	strb	r3, [r7, #16]
    request[9] = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	747b      	strb	r3, [r7, #17]
    request[10] = 0x30;
 8000aca:	2330      	movs	r3, #48	@ 0x30
 8000acc:	74bb      	strb	r3, [r7, #18]
    
    // Position (unused)
    request[11] = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	74fb      	strb	r3, [r7, #19]
    request[12] = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	753b      	strb	r3, [r7, #20]
    request[13] = 0x00;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	757b      	strb	r3, [r7, #21]
    request[14] = 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	75bb      	strb	r3, [r7, #22]
    
    // Speed
    if (speed >= 0) {
 8000ade:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0c      	blt.n	8000b00 <_Z19Motor_Speed_Controlhs+0x80>
        // Positive values: 00 00 followed by value
        request[15] = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	75fb      	strb	r3, [r7, #23]
        request[16] = 0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	763b      	strb	r3, [r7, #24]
        request[17] = (speed >> 8) & 0xFF;
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	767b      	strb	r3, [r7, #25]
        request[18] = speed & 0xFF;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	76bb      	strb	r3, [r7, #26]
 8000afe:	e011      	b.n	8000b24 <_Z19Motor_Speed_Controlhs+0xa4>
    } else {
        
        int32_t fullValue = speed;  
 8000b00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
        request[15] = (fullValue >> 24) & 0xFF; 
 8000b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b08:	0e1b      	lsrs	r3, r3, #24
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	75fb      	strb	r3, [r7, #23]
        request[16] = (fullValue >> 16) & 0xFF; 
 8000b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b10:	141b      	asrs	r3, r3, #16
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	763b      	strb	r3, [r7, #24]
        request[17] = (fullValue >> 8) & 0xFF;   
 8000b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b18:	121b      	asrs	r3, r3, #8
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	767b      	strb	r3, [r7, #25]
        request[18] = fullValue & 0xFF;      
 8000b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	76bb      	strb	r3, [r7, #26]
    }
    
    // Acceleration
    request[19] = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	76fb      	strb	r3, [r7, #27]
    request[20] = 0x00;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	773b      	strb	r3, [r7, #28]
    request[21] = (DEFAULT_ACCELERATION >> 8) & 0xFF;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	777b      	strb	r3, [r7, #29]
    request[22] = DEFAULT_ACCELERATION & 0xFF;
 8000b30:	23e8      	movs	r3, #232	@ 0xe8
 8000b32:	77bb      	strb	r3, [r7, #30]
    
    // Deceleration
    request[23] = 0x00;
 8000b34:	2300      	movs	r3, #0
 8000b36:	77fb      	strb	r3, [r7, #31]
    request[24] = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3020 	strb.w	r3, [r7, #32]
    request[25] = (DEFAULT_DECELERATION >> 8) & 0xFF;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    request[26] = DEFAULT_DECELERATION & 0xFF;
 8000b44:	23e8      	movs	r3, #232	@ 0xe8
 8000b46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    
    // Torque limit
    request[27] = 0x00;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    request[28] = 0x00;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    request[29] = (DEFAULT_TORQUE_LIMIT >> 8) & 0xFF;
 8000b56:	2309      	movs	r3, #9
 8000b58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    request[30] = DEFAULT_TORQUE_LIMIT & 0xFF;
 8000b5c:	23c4      	movs	r3, #196	@ 0xc4
 8000b5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    // Trigger
    request[31] = 0x00;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    request[32] = 0x00;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    request[33] = 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    request[34] = 0x01;
 8000b74:	2301      	movs	r3, #1
 8000b76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    
    uint16_t crc = Modbus_CalculateCRC(request, 35);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2123      	movs	r1, #35	@ 0x23
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fee7 	bl	8000954 <_Z19Modbus_CalculateCRCPht>
 8000b86:	4603      	mov	r3, r0
 8000b88:	867b      	strh	r3, [r7, #50]	@ 0x32
    request[35] = crc & 0xFF;
 8000b8a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    request[36] = (crc >> 8) & 0xFF;
 8000b92:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    
    return Modbus_SendCommand(request, 37);
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	2125      	movs	r1, #37	@ 0x25
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff11 	bl	80009cc <_Z18Modbus_SendCommandPht>
 8000baa:	4603      	mov	r3, r0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3738      	adds	r7, #56	@ 0x38
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_Z18Motor_CW_Low_Speedh>:

// CW Speed Control Functions
uint8_t Motor_CW_Low_Speed(uint8_t motorID) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
    uint16_t speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_LOW : M2_SPEED_LOW;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <_Z18Motor_CW_Low_Speedh+0x16>
 8000bc4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000bc8:	e001      	b.n	8000bce <_Z18Motor_CW_Low_Speedh+0x1a>
 8000bca:	f240 1377 	movw	r3, #375	@ 0x177
 8000bce:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, speed);
 8000bd0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff51 	bl	8000a80 <_Z19Motor_Speed_Controlhs>
 8000bde:	4603      	mov	r3, r0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_Z18Motor_CW_Mid_Speedh>:

uint8_t Motor_CW_Mid_Speed(uint8_t motorID) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
    uint16_t speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_MID : M2_SPEED_MID;
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d102      	bne.n	8000bfe <_Z18Motor_CW_Mid_Speedh+0x16>
 8000bf8:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000bfc:	e001      	b.n	8000c02 <_Z18Motor_CW_Mid_Speedh+0x1a>
 8000bfe:	f240 2371 	movw	r3, #625	@ 0x271
 8000c02:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, speed);
 8000c04:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff37 	bl	8000a80 <_Z19Motor_Speed_Controlhs>
 8000c12:	4603      	mov	r3, r0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_Z19Motor_CW_High_Speedh>:

uint8_t Motor_CW_High_Speed(uint8_t motorID) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
    uint16_t speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_HIGH : M2_SPEED_HIGH;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d102      	bne.n	8000c32 <_Z19Motor_CW_High_Speedh+0x16>
 8000c2c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c30:	e001      	b.n	8000c36 <_Z19Motor_CW_High_Speedh+0x1a>
 8000c32:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000c36:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, speed);
 8000c38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff1d 	bl	8000a80 <_Z19Motor_Speed_Controlhs>
 8000c46:	4603      	mov	r3, r0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_Z19Motor_CCW_Low_Speedh>:

// CCW Speed Control Functions
uint8_t Motor_CCW_Low_Speed(uint8_t motorID) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
    uint16_t speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_LOW : M2_SPEED_LOW;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d102      	bne.n	8000c66 <_Z19Motor_CCW_Low_Speedh+0x16>
 8000c60:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c64:	e001      	b.n	8000c6a <_Z19Motor_CCW_Low_Speedh+0x1a>
 8000c66:	f240 1377 	movw	r3, #375	@ 0x177
 8000c6a:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, -speed);
 8000c6c:	89fb      	ldrh	r3, [r7, #14]
 8000c6e:	425b      	negs	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff01 	bl	8000a80 <_Z19Motor_Speed_Controlhs>
 8000c7e:	4603      	mov	r3, r0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_Z19Motor_CCW_Mid_Speedh>:

uint8_t Motor_CCW_Mid_Speed(uint8_t motorID) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
    uint16_t speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_MID : M2_SPEED_MID;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d102      	bne.n	8000c9e <_Z19Motor_CCW_Mid_Speedh+0x16>
 8000c98:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000c9c:	e001      	b.n	8000ca2 <_Z19Motor_CCW_Mid_Speedh+0x1a>
 8000c9e:	f240 2371 	movw	r3, #625	@ 0x271
 8000ca2:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, -speed);
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fee5 	bl	8000a80 <_Z19Motor_Speed_Controlhs>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_Z20Motor_CCW_High_Speedh>:

uint8_t Motor_CCW_High_Speed(uint8_t motorID) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    uint16_t speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_HIGH : M2_SPEED_HIGH;
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d102      	bne.n	8000cd6 <_Z20Motor_CCW_High_Speedh+0x16>
 8000cd0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000cd4:	e001      	b.n	8000cda <_Z20Motor_CCW_High_Speedh+0x1a>
 8000cd6:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000cda:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, -speed);
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	425b      	negs	r3, r3
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fec9 	bl	8000a80 <_Z19Motor_Speed_Controlhs>
 8000cee:	4603      	mov	r3, r0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_Z10Motor_Stoph>:

uint8_t Motor_Stop(uint8_t motorID) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
    return Motor_Speed_Control(motorID, 0);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff feba 	bl	8000a80 <_Z19Motor_Speed_Controlhs>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a32      	ldr	r2, [pc, #200]	@ (8000e50 <HAL_UART_MspInit+0xe8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12d      	bne.n	8000de6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a30      	ldr	r2, [pc, #192]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a29      	ldr	r2, [pc, #164]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481e      	ldr	r0, [pc, #120]	@ (8000e58 <HAL_UART_MspInit+0xf0>)
 8000de0:	f000 fa96 	bl	8001310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000de4:	e030      	b.n	8000e48 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <HAL_UART_MspInit+0xf4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d12b      	bne.n	8000e48 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df8:	4a16      	ldr	r2, [pc, #88]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000dfa:	f043 0320 	orr.w	r3, r3, #32
 8000dfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e04:	f003 0320 	and.w	r3, r3, #32
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	4a0f      	ldr	r2, [pc, #60]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e28:	23c0      	movs	r3, #192	@ 0xc0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4807      	ldr	r0, [pc, #28]	@ (8000e60 <HAL_UART_MspInit+0xf8>)
 8000e44:	f000 fa64 	bl	8001310 <HAL_GPIO_Init>
}
 8000e48:	bf00      	nop
 8000e4a:	3730      	adds	r7, #48	@ 0x30
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40004800 	.word	0x40004800
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40020800 	.word	0x40020800

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b098      	sub	sp, #96	@ 0x60
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	223c      	movs	r2, #60	@ 0x3c
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 faa2 	bl	80033ce <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e92:	d14d      	bne.n	8000f30 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e94:	2320      	movs	r3, #32
 8000e96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 ff3d 	bl	8001d20 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000eac:	f7ff fd4c 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ecc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <HAL_PCD_MspInit+0xd8>)
 8000eea:	f000 fa11 	bl	8001310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f00:	4619      	mov	r1, r3
 8000f02:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <HAL_PCD_MspInit+0xd8>)
 8000f04:	f000 fa04 	bl	8001310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f12:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <HAL_PCD_MspInit+0xd4>)
 8000f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f30:	bf00      	nop
 8000f32:	3760      	adds	r7, #96	@ 0x60
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <NMI_Handler+0x4>

08000f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <MemManage_Handler+0x4>

08000f58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f000 f891 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f002 f9f5 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fa7d 	bl	80004f4 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ffc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001008:	08003468 	.word	0x08003468
  ldr r2, =_sbss
 800100c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001010:	200005a0 	.word	0x200005a0

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f931 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fe64 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f93b 	bl	80012f6 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f911 	bl	80012be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	2000059c 	.word	0x2000059c

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2000059c 	.word	0x2000059c

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	@ (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff8e 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff47 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff5c 	bl	800118c <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff8e 	bl	80011fc <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5d 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffb0 	bl	8001264 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e165      	b.n	80015f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8154 	bne.w	80015f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d005      	beq.n	8001362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	2b02      	cmp	r3, #2
 8001360:	d130      	bne.n	80013c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 0201 	and.w	r2, r3, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d017      	beq.n	8001400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d123      	bne.n	8001454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	69b9      	ldr	r1, [r7, #24]
 8001450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0203 	and.w	r2, r3, #3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80ae 	beq.w	80015f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b5d      	ldr	r3, [pc, #372]	@ (8001610 <HAL_GPIO_Init+0x300>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	4a5c      	ldr	r2, [pc, #368]	@ (8001610 <HAL_GPIO_Init+0x300>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001610 <HAL_GPIO_Init+0x300>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b2:	4a58      	ldr	r2, [pc, #352]	@ (8001614 <HAL_GPIO_Init+0x304>)
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001618 <HAL_GPIO_Init+0x308>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x21a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	@ (800161c <HAL_GPIO_Init+0x30c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x216>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001620 <HAL_GPIO_Init+0x310>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x212>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001624 <HAL_GPIO_Init+0x314>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x20e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001628 <HAL_GPIO_Init+0x318>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x20a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	@ (800162c <HAL_GPIO_Init+0x31c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x206>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a49      	ldr	r2, [pc, #292]	@ (8001630 <HAL_GPIO_Init+0x320>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x202>
 800150e:	2306      	movs	r3, #6
 8001510:	e00c      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001512:	2307      	movs	r3, #7
 8001514:	e00a      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001516:	2305      	movs	r3, #5
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x21c>
 800151a:	2304      	movs	r3, #4
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x21c>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x21c>
 800152a:	2300      	movs	r3, #0
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153c:	4935      	ldr	r1, [pc, #212]	@ (8001614 <HAL_GPIO_Init+0x304>)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154a:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <HAL_GPIO_Init+0x324>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800156e:	4a31      	ldr	r2, [pc, #196]	@ (8001634 <HAL_GPIO_Init+0x324>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001574:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <HAL_GPIO_Init+0x324>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001598:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <HAL_GPIO_Init+0x324>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <HAL_GPIO_Init+0x324>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <HAL_GPIO_Init+0x324>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_GPIO_Init+0x324>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ec:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <HAL_GPIO_Init+0x324>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	2b0f      	cmp	r3, #15
 80015fc:	f67f ae96 	bls.w	800132c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3724      	adds	r7, #36	@ 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40013800 	.word	0x40013800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020400 	.word	0x40020400
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40013c00 	.word	0x40013c00

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af02      	add	r7, sp, #8
 8001670:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e108      	b.n	800188e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fbe4 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016aa:	d102      	bne.n	80016b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 fbf4 	bl	8002ea4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7c1a      	ldrb	r2, [r3, #16]
 80016c4:	f88d 2000 	strb.w	r2, [sp]
 80016c8:	3304      	adds	r3, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	f001 fb86 	bl	8002ddc <USB_CoreInit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0d5      	b.n	800188e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fbec 	bl	8002ec6 <USB_SetCurrentMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0c6      	b.n	800188e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e04a      	b.n	800179c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3315      	adds	r3, #21
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3314      	adds	r3, #20
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	b298      	uxth	r0, r3
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	332e      	adds	r3, #46	@ 0x2e
 8001742:	4602      	mov	r2, r0
 8001744:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3318      	adds	r3, #24
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	331c      	adds	r3, #28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3320      	adds	r3, #32
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	3324      	adds	r3, #36	@ 0x24
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	3301      	adds	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3af      	bcc.n	8001706 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e044      	b.n	8001836 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	3301      	adds	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3b5      	bcc.n	80017ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7c1a      	ldrb	r2, [r3, #16]
 8001848:	f88d 2000 	strb.w	r2, [sp]
 800184c:	3304      	adds	r3, #4
 800184e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001850:	f001 fb86 	bl	8002f60 <USB_DevInit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e013      	b.n	800188e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7b1b      	ldrb	r3, [r3, #12]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f80a 	bl	8001896 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fd41 	bl	800330e <USB_DevDisconnect>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	f043 0303 	orr.w	r3, r3, #3
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0cc      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d90c      	bls.n	800191c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b65      	ldr	r3, [pc, #404]	@ (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b63      	ldr	r3, [pc, #396]	@ (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0b8      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b59      	ldr	r3, [pc, #356]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a58      	ldr	r2, [pc, #352]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800193e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800194c:	4b53      	ldr	r3, [pc, #332]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a52      	ldr	r2, [pc, #328]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b50      	ldr	r3, [pc, #320]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	494d      	ldr	r1, [pc, #308]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d044      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d119      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199a:	2b03      	cmp	r3, #3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b3b      	ldr	r3, [pc, #236]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e067      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019be:	4b37      	ldr	r3, [pc, #220]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 0203 	bic.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4934      	ldr	r1, [pc, #208]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d0:	f7ff fb88 	bl	80010e4 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f7ff fb84 	bl	80010e4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e04f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	4b2b      	ldr	r3, [pc, #172]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 020c 	and.w	r2, r3, #12
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1eb      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a00:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d20c      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e032      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4916      	ldr	r1, [pc, #88]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	490e      	ldr	r1, [pc, #56]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a66:	f000 f821 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	490a      	ldr	r1, [pc, #40]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fae8 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	08003440 	.word	0x08003440
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab0:	b094      	sub	sp, #80	@ 0x50
 8001ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac4:	4b79      	ldr	r3, [pc, #484]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d00d      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x40>
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	f200 80e1 	bhi.w	8001c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ade:	e0db      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b73      	ldr	r3, [pc, #460]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae4:	e0db      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae6:	4b73      	ldr	r3, [pc, #460]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aea:	e0d8      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aec:	4b6f      	ldr	r3, [pc, #444]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001af4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af6:	4b6d      	ldr	r3, [pc, #436]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	4b6a      	ldr	r3, [pc, #424]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b1e:	4622      	mov	r2, r4
 8001b20:	462b      	mov	r3, r5
 8001b22:	f04f 0000 	mov.w	r0, #0
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	0159      	lsls	r1, r3, #5
 8001b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b30:	0150      	lsls	r0, r2, #5
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4621      	mov	r1, r4
 8001b38:	1a51      	subs	r1, r2, r1
 8001b3a:	6139      	str	r1, [r7, #16]
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b50:	4659      	mov	r1, fp
 8001b52:	018b      	lsls	r3, r1, #6
 8001b54:	4651      	mov	r1, sl
 8001b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b5a:	4651      	mov	r1, sl
 8001b5c:	018a      	lsls	r2, r1, #6
 8001b5e:	4651      	mov	r1, sl
 8001b60:	ebb2 0801 	subs.w	r8, r2, r1
 8001b64:	4659      	mov	r1, fp
 8001b66:	eb63 0901 	sbc.w	r9, r3, r1
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b7e:	4690      	mov	r8, r2
 8001b80:	4699      	mov	r9, r3
 8001b82:	4623      	mov	r3, r4
 8001b84:	eb18 0303 	adds.w	r3, r8, r3
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	eb49 0303 	adc.w	r3, r9, r3
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	024b      	lsls	r3, r1, #9
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ba8:	4621      	mov	r1, r4
 8001baa:	024a      	lsls	r2, r1, #9
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bbc:	f7fe fb22 	bl	8000204 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bc8:	e058      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001be4:	4642      	mov	r2, r8
 8001be6:	464b      	mov	r3, r9
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	0159      	lsls	r1, r3, #5
 8001bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf6:	0150      	lsls	r0, r2, #5
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4641      	mov	r1, r8
 8001bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c02:	4649      	mov	r1, r9
 8001c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c20:	eb63 050b 	sbc.w	r5, r3, fp
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	00eb      	lsls	r3, r5, #3
 8001c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c32:	00e2      	lsls	r2, r4, #3
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	18e3      	adds	r3, r4, r3
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	464b      	mov	r3, r9
 8001c40:	eb45 0303 	adc.w	r3, r5, r3
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c52:	4629      	mov	r1, r5
 8001c54:	028b      	lsls	r3, r1, #10
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	028a      	lsls	r2, r1, #10
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c66:	2200      	movs	r2, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	61fa      	str	r2, [r7, #28]
 8001c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c70:	f7fe fac8 	bl	8000204 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3750      	adds	r7, #80	@ 0x50
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff0 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08003450 	.word	0x08003450

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cfc:	f7ff ffdc 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0b5b      	lsrs	r3, r3, #13
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	@ (8001d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08003450 	.word	0x08003450

08001d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d40:	4b87      	ldr	r3, [pc, #540]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d46:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4984      	ldr	r1, [pc, #528]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d74:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4978      	ldr	r1, [pc, #480]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8083 	beq.w	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b6f      	ldr	r3, [pc, #444]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	4a6e      	ldr	r2, [pc, #440]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dae:	4b6c      	ldr	r3, [pc, #432]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001dba:	4b6a      	ldr	r3, [pc, #424]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a69      	ldr	r2, [pc, #420]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc6:	f7ff f98d 	bl	80010e4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7ff f989 	bl	80010e4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e162      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001de0:	4b60      	ldr	r3, [pc, #384]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dec:	4b5c      	ldr	r3, [pc, #368]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df4:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d02f      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d028      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e0a:	4b55      	ldr	r3, [pc, #340]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e12:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e14:	4b54      	ldr	r3, [pc, #336]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1a:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e20:	4a4f      	ldr	r2, [pc, #316]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e26:	4b4e      	ldr	r3, [pc, #312]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d114      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff f957 	bl	80010e4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f953 	bl	80010e4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e12a      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	4b43      	ldr	r3, [pc, #268]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e68:	d10d      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e7e:	4938      	ldr	r1, [pc, #224]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
 8001e84:	e005      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001e86:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a35      	ldr	r2, [pc, #212]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e90:	6093      	str	r3, [r2, #8]
 8001e92:	4b33      	ldr	r3, [pc, #204]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9e:	4930      	ldr	r1, [pc, #192]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001eb8:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001ec6:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ecc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	4922      	ldr	r1, [pc, #136]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d011      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eee:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	491a      	ldr	r1, [pc, #104]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f06:	d101      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	490e      	ldr	r1, [pc, #56]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d004      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b80      	cmp	r3, #128	@ 0x80
 8001f3a:	f040 8091 	bne.w	8002060 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f44:	f7ff f8ce 	bl	80010e4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f4a:	e013      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f4c:	f7ff f8ca 	bl	80010e4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d90c      	bls.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0a3      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42470e40 	.word	0x42470e40
 8001f6c:	424711e0 	.word	0x424711e0
 8001f70:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f74:	4b4e      	ldr	r3, [pc, #312]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e5      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001f80:	4a4c      	ldr	r2, [pc, #304]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f86:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d023      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d019      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d019      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fe2:	d110      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	071b      	lsls	r3, r3, #28
 8001ffe:	492c      	ldr	r1, [pc, #176]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	019b      	lsls	r3, r3, #6
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	071b      	lsls	r3, r3, #28
 800202c:	4920      	ldr	r1, [pc, #128]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800203a:	f7ff f853 	bl	80010e4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002042:	f7ff f84f 	bl	80010e4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e028      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002054:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800206c:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002072:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207a:	490d      	ldr	r1, [pc, #52]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002094:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	424710d8 	.word	0x424710d8
 80020b8:	42470068 	.word	0x42470068

080020bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e273      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d075      	beq.n	80021c6 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020da:	4b88      	ldr	r3, [pc, #544]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d00c      	beq.n	8002100 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e6:	4b85      	ldr	r3, [pc, #532]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d112      	bne.n	8002118 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f2:	4b82      	ldr	r3, [pc, #520]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020fe:	d10b      	bne.n	8002118 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	4b7e      	ldr	r3, [pc, #504]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d05b      	beq.n	80021c4 <HAL_RCC_OscConfig+0x108>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d157      	bne.n	80021c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e24e      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002120:	d106      	bne.n	8002130 <HAL_RCC_OscConfig+0x74>
 8002122:	4b76      	ldr	r3, [pc, #472]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a75      	ldr	r2, [pc, #468]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0xb0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x98>
 800213a:	4b70      	ldr	r3, [pc, #448]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6f      	ldr	r2, [pc, #444]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b6d      	ldr	r3, [pc, #436]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6c      	ldr	r2, [pc, #432]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xb0>
 8002154:	4b69      	ldr	r3, [pc, #420]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a68      	ldr	r2, [pc, #416]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b66      	ldr	r3, [pc, #408]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a65      	ldr	r2, [pc, #404]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800216a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe ffb6 	bl	80010e4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7fe ffb2 	bl	80010e4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	@ 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e213      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b5b      	ldr	r3, [pc, #364]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0xc0>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe ffa2 	bl	80010e4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe ff9e 	bl	80010e4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	@ 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1ff      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0xe8>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021d2:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021de:	4b47      	ldr	r3, [pc, #284]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d11c      	bne.n	8002224 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ea:	4b44      	ldr	r3, [pc, #272]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	4b41      	ldr	r3, [pc, #260]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x152>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e1d3      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b3b      	ldr	r3, [pc, #236]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4937      	ldr	r1, [pc, #220]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	e03a      	b.n	800229a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_RCC_OscConfig+0x244>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe ff57 	bl	80010e4 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7fe ff53 	bl	80010e4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1b4      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4925      	ldr	r1, [pc, #148]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
 800226c:	e015      	b.n	800229a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <HAL_RCC_OscConfig+0x244>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe ff36 	bl	80010e4 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227c:	f7fe ff32 	bl	80010e4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e193      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d036      	beq.n	8002314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d016      	beq.n	80022dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_RCC_OscConfig+0x248>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7fe ff16 	bl	80010e4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7fe ff12 	bl	80010e4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e173      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_OscConfig+0x240>)
 80022d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x200>
 80022da:	e01b      	b.n	8002314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_RCC_OscConfig+0x248>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e2:	f7fe feff 	bl	80010e4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	e00e      	b.n	8002308 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ea:	f7fe fefb 	bl	80010e4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d907      	bls.n	8002308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e15c      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
 80022fc:	40023800 	.word	0x40023800
 8002300:	42470000 	.word	0x42470000
 8002304:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b8a      	ldr	r3, [pc, #552]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 800230a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ea      	bne.n	80022ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8097 	beq.w	8002450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b83      	ldr	r3, [pc, #524]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10f      	bne.n	8002352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b7f      	ldr	r3, [pc, #508]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4a7e      	ldr	r2, [pc, #504]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	@ 0x40
 8002342:	4b7c      	ldr	r3, [pc, #496]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b79      	ldr	r3, [pc, #484]	@ (8002538 <HAL_RCC_OscConfig+0x47c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <HAL_RCC_OscConfig+0x47c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_RCC_OscConfig+0x47c>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe febb 	bl	80010e4 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7fe feb7 	bl	80010e4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e118      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b6c      	ldr	r3, [pc, #432]	@ (8002538 <HAL_RCC_OscConfig+0x47c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2ea>
 8002398:	4b66      	ldr	r3, [pc, #408]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	4a65      	ldr	r2, [pc, #404]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x324>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x30c>
 80023ae:	4b61      	ldr	r3, [pc, #388]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b2:	4a60      	ldr	r2, [pc, #384]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023be:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0x324>
 80023c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023cc:	4a59      	ldr	r2, [pc, #356]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d4:	4b57      	ldr	r3, [pc, #348]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d8:	4a56      	ldr	r2, [pc, #344]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d015      	beq.n	8002414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7fe fe7c 	bl	80010e4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fe78 	bl	80010e4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0d7      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	4b4b      	ldr	r3, [pc, #300]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ee      	beq.n	80023f0 <HAL_RCC_OscConfig+0x334>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fe66 	bl	80010e4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe fe62 	bl	80010e4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0c1      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002432:	4b40      	ldr	r3, [pc, #256]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ee      	bne.n	800241c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	4a3a      	ldr	r2, [pc, #232]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 800244a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800244e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80ad 	beq.w	80025b4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800245a:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b08      	cmp	r3, #8
 8002464:	d060      	beq.n	8002528 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d145      	bne.n	80024fa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b33      	ldr	r3, [pc, #204]	@ (800253c <HAL_RCC_OscConfig+0x480>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fe36 	bl	80010e4 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fe32 	bl	80010e4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e093      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b29      	ldr	r3, [pc, #164]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	3b01      	subs	r3, #1
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	071b      	lsls	r3, r3, #28
 80024c6:	491b      	ldr	r1, [pc, #108]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x480>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe fe07 	bl	80010e4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fe03 	bl	80010e4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e064      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x41e>
 80024f8:	e05c      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_RCC_OscConfig+0x480>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fdf0 	bl	80010e4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fdec 	bl	80010e4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e04d      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_RCC_OscConfig+0x478>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x44c>
 8002526:	e045      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e040      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <HAL_RCC_OscConfig+0x504>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d030      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d129      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d122      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	4293      	cmp	r3, r2
 800257a:	d119      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d10f      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e042      	b.n	800265c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fbbc 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2224      	movs	r2, #36	@ 0x24
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f973 	bl	80028f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800261c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800262c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800263c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	d175      	bne.n	8002770 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Transmit+0x2c>
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e06e      	b.n	8002772 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2221      	movs	r2, #33	@ 0x21
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a2:	f7fe fd1f 	bl	80010e4 <HAL_GetTick>
 80026a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026bc:	d108      	bne.n	80026d0 <HAL_UART_Transmit+0x6c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d104      	bne.n	80026d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e003      	b.n	80026d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026d8:	e02e      	b.n	8002738 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2180      	movs	r1, #128	@ 0x80
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f848 	bl	800277a <UART_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e03a      	b.n	8002772 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	3302      	adds	r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	e007      	b.n	800272a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3301      	adds	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1cb      	bne.n	80026da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	2140      	movs	r1, #64	@ 0x40
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f814 	bl	800277a <UART_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e006      	b.n	8002772 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278a:	e03b      	b.n	8002804 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d037      	beq.n	8002804 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7fe fca6 	bl	80010e4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	6a3a      	ldr	r2, [r7, #32]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <UART_WaitOnFlagUntilTimeout+0x30>
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e03a      	b.n	8002824 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d023      	beq.n	8002804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b80      	cmp	r3, #128	@ 0x80
 80027c0:	d020      	beq.n	8002804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b40      	cmp	r3, #64	@ 0x40
 80027c6:	d01d      	beq.n	8002804 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d116      	bne.n	8002804 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f81d 	bl	800282c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2208      	movs	r2, #8
 80027f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e00f      	b.n	8002824 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	429a      	cmp	r2, r3
 8002820:	d0b4      	beq.n	800278c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800282c:	b480      	push	{r7}
 800282e:	b095      	sub	sp, #84	@ 0x54
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283e:	e853 3f00 	ldrex	r3, [r3]
 8002842:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800284a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002854:	643a      	str	r2, [r7, #64]	@ 0x40
 8002856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800285a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800285c:	e841 2300 	strex	r3, r2, [r1]
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e5      	bne.n	8002834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	61fb      	str	r3, [r7, #28]
   return(result);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3314      	adds	r3, #20
 8002886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002888:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800288a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800288e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002890:	e841 2300 	strex	r3, r2, [r1]
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d119      	bne.n	80028d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f023 0310 	bic.w	r3, r3, #16
 80028ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028c4:	61ba      	str	r2, [r7, #24]
 80028c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c8:	6979      	ldr	r1, [r7, #20]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	e841 2300 	strex	r3, r2, [r1]
 80028d0:	613b      	str	r3, [r7, #16]
   return(result);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e5      	bne.n	80028a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028e6:	bf00      	nop
 80028e8:	3754      	adds	r7, #84	@ 0x54
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f8:	b0c0      	sub	sp, #256	@ 0x100
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002910:	68d9      	ldr	r1, [r3, #12]
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	ea40 0301 	orr.w	r3, r0, r1
 800291c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800291e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	431a      	orrs	r2, r3
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	431a      	orrs	r2, r3
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800294c:	f021 010c 	bic.w	r1, r1, #12
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800295a:	430b      	orrs	r3, r1
 800295c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296e:	6999      	ldr	r1, [r3, #24]
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	ea40 0301 	orr.w	r3, r0, r1
 800297a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b8f      	ldr	r3, [pc, #572]	@ (8002bc0 <UART_SetConfig+0x2cc>)
 8002984:	429a      	cmp	r2, r3
 8002986:	d005      	beq.n	8002994 <UART_SetConfig+0xa0>
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b8d      	ldr	r3, [pc, #564]	@ (8002bc4 <UART_SetConfig+0x2d0>)
 8002990:	429a      	cmp	r2, r3
 8002992:	d104      	bne.n	800299e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002994:	f7ff f9b0 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8002998:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800299c:	e003      	b.n	80029a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800299e:	f7ff f997 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 80029a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029b0:	f040 810c 	bne.w	8002bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029c6:	4622      	mov	r2, r4
 80029c8:	462b      	mov	r3, r5
 80029ca:	1891      	adds	r1, r2, r2
 80029cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029ce:	415b      	adcs	r3, r3
 80029d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029d6:	4621      	mov	r1, r4
 80029d8:	eb12 0801 	adds.w	r8, r2, r1
 80029dc:	4629      	mov	r1, r5
 80029de:	eb43 0901 	adc.w	r9, r3, r1
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029f6:	4690      	mov	r8, r2
 80029f8:	4699      	mov	r9, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	eb18 0303 	adds.w	r3, r8, r3
 8002a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a04:	462b      	mov	r3, r5
 8002a06:	eb49 0303 	adc.w	r3, r9, r3
 8002a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a22:	460b      	mov	r3, r1
 8002a24:	18db      	adds	r3, r3, r3
 8002a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a28:	4613      	mov	r3, r2
 8002a2a:	eb42 0303 	adc.w	r3, r2, r3
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a38:	f7fd fbe4 	bl	8000204 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002a42:	fba3 2302 	umull	r2, r3, r3, r2
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	011c      	lsls	r4, r3, #4
 8002a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a5c:	4642      	mov	r2, r8
 8002a5e:	464b      	mov	r3, r9
 8002a60:	1891      	adds	r1, r2, r2
 8002a62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a64:	415b      	adcs	r3, r3
 8002a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a72:	4649      	mov	r1, r9
 8002a74:	eb43 0b01 	adc.w	fp, r3, r1
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a8c:	4692      	mov	sl, r2
 8002a8e:	469b      	mov	fp, r3
 8002a90:	4643      	mov	r3, r8
 8002a92:	eb1a 0303 	adds.w	r3, sl, r3
 8002a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	18db      	adds	r3, r3, r3
 8002abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002abe:	4613      	mov	r3, r2
 8002ac0:	eb42 0303 	adc.w	r3, r2, r3
 8002ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ace:	f7fd fb99 	bl	8000204 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002ada:	fba3 2301 	umull	r2, r3, r3, r1
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2264      	movs	r2, #100	@ 0x64
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	1acb      	subs	r3, r1, r3
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002aee:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002af0:	fba3 2302 	umull	r2, r3, r3, r2
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002afc:	441c      	add	r4, r3
 8002afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b10:	4642      	mov	r2, r8
 8002b12:	464b      	mov	r3, r9
 8002b14:	1891      	adds	r1, r2, r2
 8002b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b18:	415b      	adcs	r3, r3
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b20:	4641      	mov	r1, r8
 8002b22:	1851      	adds	r1, r2, r1
 8002b24:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b26:	4649      	mov	r1, r9
 8002b28:	414b      	adcs	r3, r1
 8002b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b38:	4659      	mov	r1, fp
 8002b3a:	00cb      	lsls	r3, r1, #3
 8002b3c:	4651      	mov	r1, sl
 8002b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b42:	4651      	mov	r1, sl
 8002b44:	00ca      	lsls	r2, r1, #3
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4642      	mov	r2, r8
 8002b4e:	189b      	adds	r3, r3, r2
 8002b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b54:	464b      	mov	r3, r9
 8002b56:	460a      	mov	r2, r1
 8002b58:	eb42 0303 	adc.w	r3, r2, r3
 8002b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b74:	460b      	mov	r3, r1
 8002b76:	18db      	adds	r3, r3, r3
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	eb42 0303 	adc.w	r3, r2, r3
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b8a:	f7fd fb3b 	bl	8000204 <__aeabi_uldivmod>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002b94:	fba3 1302 	umull	r1, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	2164      	movs	r1, #100	@ 0x64
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	3332      	adds	r3, #50	@ 0x32
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	f003 0207 	and.w	r2, r3, #7
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4422      	add	r2, r4
 8002bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bbc:	e106      	b.n	8002dcc <UART_SetConfig+0x4d8>
 8002bbe:	bf00      	nop
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bde:	4642      	mov	r2, r8
 8002be0:	464b      	mov	r3, r9
 8002be2:	1891      	adds	r1, r2, r2
 8002be4:	6239      	str	r1, [r7, #32]
 8002be6:	415b      	adcs	r3, r3
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bee:	4641      	mov	r1, r8
 8002bf0:	1854      	adds	r4, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb43 0501 	adc.w	r5, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	00eb      	lsls	r3, r5, #3
 8002c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c06:	00e2      	lsls	r2, r4, #3
 8002c08:	4614      	mov	r4, r2
 8002c0a:	461d      	mov	r5, r3
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	18e3      	adds	r3, r4, r3
 8002c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c14:	464b      	mov	r3, r9
 8002c16:	eb45 0303 	adc.w	r3, r5, r3
 8002c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	008b      	lsls	r3, r1, #2
 8002c3e:	4621      	mov	r1, r4
 8002c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c44:	4621      	mov	r1, r4
 8002c46:	008a      	lsls	r2, r1, #2
 8002c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c4c:	f7fd fada 	bl	8000204 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4b60      	ldr	r3, [pc, #384]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002c56:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	011c      	lsls	r4, r3, #4
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	61b9      	str	r1, [r7, #24]
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c80:	4641      	mov	r1, r8
 8002c82:	1851      	adds	r1, r2, r1
 8002c84:	6139      	str	r1, [r7, #16]
 8002c86:	4649      	mov	r1, r9
 8002c88:	414b      	adcs	r3, r1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c98:	4659      	mov	r1, fp
 8002c9a:	00cb      	lsls	r3, r1, #3
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	00ca      	lsls	r2, r1, #3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	4642      	mov	r2, r8
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cd8:	4649      	mov	r1, r9
 8002cda:	008b      	lsls	r3, r1, #2
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	008a      	lsls	r2, r1, #2
 8002ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cea:	f7fd fa8b 	bl	8000204 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2264      	movs	r2, #100	@ 0x64
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	1acb      	subs	r3, r1, r3
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	3332      	adds	r3, #50	@ 0x32
 8002d08:	4a33      	ldr	r2, [pc, #204]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d14:	441c      	add	r4, r3
 8002d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	1891      	adds	r1, r2, r2
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d34:	4641      	mov	r1, r8
 8002d36:	1851      	adds	r1, r2, r1
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	414b      	adcs	r3, r1
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	00cb      	lsls	r3, r1, #3
 8002d50:	4651      	mov	r1, sl
 8002d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d56:	4651      	mov	r1, sl
 8002d58:	00ca      	lsls	r2, r1, #3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4642      	mov	r2, r8
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d66:	464b      	mov	r3, r9
 8002d68:	460a      	mov	r2, r1
 8002d6a:	eb42 0303 	adc.w	r3, r2, r3
 8002d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d88:	4649      	mov	r1, r9
 8002d8a:	008b      	lsls	r3, r1, #2
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d92:	4641      	mov	r1, r8
 8002d94:	008a      	lsls	r2, r1, #2
 8002d96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d9a:	f7fd fa33 	bl	8000204 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002da4:	fba3 1302 	umull	r1, r3, r3, r2
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	2164      	movs	r1, #100	@ 0x64
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	3332      	adds	r3, #50	@ 0x32
 8002db6:	4a08      	ldr	r2, [pc, #32]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	f003 020f 	and.w	r2, r3, #15
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4422      	add	r2, r4
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd8:	51eb851f 	.word	0x51eb851f

08002ddc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ddc:	b084      	sub	sp, #16
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	f107 001c 	add.w	r0, r7, #28
 8002dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d123      	bne.n	8002e3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa9a 	bl	800336c <USB_CoreReset>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e01b      	b.n	8002e76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa8e 	bl	800336c <USB_CoreReset>
 8002e50:	4603      	mov	r3, r0
 8002e52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e68:	e005      	b.n	8002e76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e76:	7fbb      	ldrb	r3, [r7, #30]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10b      	bne.n	8002e94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f043 0206 	orr.w	r2, r3, #6
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ea0:	b004      	add	sp, #16
 8002ea2:	4770      	bx	lr

08002ea4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 0201 	bic.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d115      	bne.n	8002f14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ef4:	200a      	movs	r0, #10
 8002ef6:	f7fe f901 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	330a      	adds	r3, #10
 8002efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fa25 	bl	8003350 <USB_GetMode>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d01e      	beq.n	8002f4a <USB_SetCurrentMode+0x84>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f10:	d9f0      	bls.n	8002ef4 <USB_SetCurrentMode+0x2e>
 8002f12:	e01a      	b.n	8002f4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f26:	200a      	movs	r0, #10
 8002f28:	f7fe f8e8 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	330a      	adds	r3, #10
 8002f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa0c 	bl	8003350 <USB_GetMode>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <USB_SetCurrentMode+0x84>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f42:	d9f0      	bls.n	8002f26 <USB_SetCurrentMode+0x60>
 8002f44:	e001      	b.n	8002f4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e005      	b.n	8002f56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f4e:	d101      	bne.n	8002f54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f60:	b084      	sub	sp, #16
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e009      	b.n	8002f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	3340      	adds	r3, #64	@ 0x40
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3301      	adds	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0e      	cmp	r3, #14
 8002f98:	d9f2      	bls.n	8002f80 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11c      	bne.n	8002fdc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e005      	b.n	8002fe8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ff4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10d      	bne.n	8003018 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003004:	2100      	movs	r1, #0
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f968 	bl	80032dc <USB_SetDevSpeed>
 800300c:	e008      	b.n	8003020 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800300e:	2101      	movs	r1, #1
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f963 	bl	80032dc <USB_SetDevSpeed>
 8003016:	e003      	b.n	8003020 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003018:	2103      	movs	r1, #3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f95e 	bl	80032dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003020:	2110      	movs	r1, #16
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8fa 	bl	800321c <USB_FlushTxFifo>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f924 	bl	8003280 <USB_FlushRxFifo>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003048:	461a      	mov	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003054:	461a      	mov	r2, r3
 8003056:	2300      	movs	r3, #0
 8003058:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003060:	461a      	mov	r2, r3
 8003062:	2300      	movs	r3, #0
 8003064:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e043      	b.n	80030f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800307e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003082:	d118      	bne.n	80030b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003096:	461a      	mov	r2, r3
 8003098:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e013      	b.n	80030c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ac:	461a      	mov	r2, r3
 80030ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e008      	b.n	80030c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d4:	461a      	mov	r2, r3
 80030d6:	2300      	movs	r3, #0
 80030d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e6:	461a      	mov	r2, r3
 80030e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3301      	adds	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030f8:	461a      	mov	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d3b5      	bcc.n	800306c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e043      	b.n	800318e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800311c:	d118      	bne.n	8003150 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e013      	b.n	8003162 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003146:	461a      	mov	r2, r3
 8003148:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e008      	b.n	8003162 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315c:	461a      	mov	r2, r3
 800315e:	2300      	movs	r3, #0
 8003160:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	2300      	movs	r3, #0
 8003172:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003180:	461a      	mov	r2, r3
 8003182:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3301      	adds	r3, #1
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003192:	461a      	mov	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4293      	cmp	r3, r2
 8003198:	d3b5      	bcc.n	8003106 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80031ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f043 0210 	orr.w	r2, r3, #16
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <USB_DevInit+0x2b8>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f043 0208 	orr.w	r2, r3, #8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003214:	b004      	add	sp, #16
 8003216:	4770      	bx	lr
 8003218:	803c3800 	.word	0x803c3800

0800321c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003236:	d901      	bls.n	800323c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e01b      	b.n	8003274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	daf2      	bge.n	800322a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	019b      	lsls	r3, r3, #6
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003260:	d901      	bls.n	8003266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e006      	b.n	8003274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b20      	cmp	r3, #32
 8003270:	d0f0      	beq.n	8003254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003298:	d901      	bls.n	800329e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e018      	b.n	80032d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	daf2      	bge.n	800328c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2210      	movs	r2, #16
 80032ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032bc:	d901      	bls.n	80032c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e006      	b.n	80032d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d0f0      	beq.n	80032b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003328:	f023 0303 	bic.w	r3, r3, #3
 800332c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0301 	and.w	r3, r3, #1
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003384:	d901      	bls.n	800338a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e01b      	b.n	80033c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	daf2      	bge.n	8003378 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3301      	adds	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033ae:	d901      	bls.n	80033b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e006      	b.n	80033c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d0f0      	beq.n	80033a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <memset>:
 80033ce:	4402      	add	r2, r0
 80033d0:	4603      	mov	r3, r0
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d100      	bne.n	80033d8 <memset+0xa>
 80033d6:	4770      	bx	lr
 80033d8:	f803 1b01 	strb.w	r1, [r3], #1
 80033dc:	e7f9      	b.n	80033d2 <memset+0x4>
	...

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	@ (800341c <__libc_init_array+0x3c>)
 80033e6:	1b64      	subs	r4, r4, r5
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2600      	movs	r6, #0
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 f818 	bl	8003428 <_init>
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2600      	movs	r6, #0
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003460 	.word	0x08003460
 800341c:	08003460 	.word	0x08003460
 8003420:	08003460 	.word	0x08003460
 8003424:	08003464 	.word	0x08003464

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr
